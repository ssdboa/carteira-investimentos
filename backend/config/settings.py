"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os # Certifique-se de que 'os' está importado no topo do arquivo
import re

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECRET_KEY: Leia da variável de ambiente. Use um valor padrão APENAS para desenvolvimento local
# se a variável não estiver definida.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-f*dle3gue-a)1$r)k*ttz92libvr9aeygqds3gtnbiz26*jv03')

# DEBUG: Leia da variável de ambiente. Converta para booleano.
# O valor padrão 'False' garante que seja seguro se a variável não for definida.
DEBUG_STR = os.environ.get('DEBUG', 'False')
DEBUG = DEBUG_STR.upper() == 'TRUE'

# ALLOWED_HOSTS: Leia da variável de ambiente.
# Se a variável DJANGO_ALLOWED_HOSTS for "host1.com,host2.com", isso criará ['host1.com', 'host2.com']
# Se for "carteira-api-develop.onrender.com", criará ['carteira-api-develop.onrender.com']
ALLOWED_HOSTS_ENV = os.environ.get('DJANGO_ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_ENV.split(',') if host.strip()]
else:
    # Se DEBUG for True e a variável não estiver definida, permita localhost para desenvolvimento.
    # Se DEBUG for False, esta lista DEVE ser preenchida pela variável de ambiente.
    if DEBUG:
        ALLOWED_HOSTS = ['localhost', '127.0.0.1']
    else:
        ALLOWED_HOSTS = [] # Em produção (DEBUG=False), se não vier do ambiente, será vazio (e causará erro se não configurado no Render)

# Importante: Se DEBUG for False e ALLOWED_HOSTS estiver vazio, o Django não iniciará corretamente.
# A configuração no Render garante que DJANGO_ALLOWED_HOSTS seja preenchido.



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

     # Meus Apps
    'apps.public_api.apps.PublicApiConfig', 
    'corsheaders', 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('MYSQL_DATABASE', 'carteira_dev'),
        'USER': os.environ.get('MYSQL_USER', 'admin'),
        'PASSWORD': os.environ.get('MYSQL_PASSWORD', 'admin'),
        'HOST': os.environ.get('DB_HOST', 'db'),
        'PORT': os.environ.get('MYSQL_PORT', '3306'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==============================================================================
# CONFIGURAÇÕES DO CORS (VERSÃO DEFINITIVA)
# ==============================================================================

# Lista de origens estáticas e confiáveis (sua URL de produção principal)
# Lida da variável de ambiente
CORS_ALLOWED_ORIGINS_ENV = os.environ.get('CORS_ALLOWED_ORIGINS')
CORS_ALLOWED_ORIGINS = []
if CORS_ALLOWED_ORIGINS_ENV:
    CORS_ALLOWED_ORIGINS.extend([origin.strip() for origin in CORS_ALLOWED_ORIGINS_ENV.split(',') if origin.strip()])

# Lista de padrões de regex para origens confiáveis (todas as suas URLs de preview)
# Lida da variável de ambiente
CORS_ALLOWED_ORIGIN_REGEXES_ENV = os.environ.get('CORS_ALLOWED_ORIGIN_REGEXES')
CORS_ALLOWED_ORIGIN_REGEXES = []
if CORS_ALLOWED_ORIGIN_REGEXES_ENV:
    CORS_ALLOWED_ORIGIN_REGEXES.extend([origin.strip() for origin in CORS_ALLOWED_ORIGIN_REGEXES_ENV.split(',') if origin.strip()])

# Para desenvolvimento local, se DEBUG=True
if DEBUG:
    CORS_ALLOWED_ORIGINS.extend([
        "http://localhost:3000",
        "http://127.0.0.1:3000",
    ])