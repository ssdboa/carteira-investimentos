# frontend/nginx.conf

server {
    listen 80;
    server_name localhost; # Ou o nome do seu domínio em produção

    # Define a raiz dos arquivos estáticos
    root /usr/share/nginx/html;
    index index.html index.htm;

    # Configuração para Single Page Application (SPA)
    # Se um arquivo ou diretório não for encontrado, serve o index.html
    # Isso permite que o roteamento do React funcione corretamente.
    location / {
        try_files $uri $uri/ /index.html;
    }

    # (Opcional, mas útil para desenvolvimento com Docker Compose)
    # Proxy para o backend Django API
    # Supondo que o backend estará acessível via http://api:8000
    # (onde 'api' é o nome do serviço backend no docker-compose.yml)
    # Se suas chamadas de API no frontend forem para, por exemplo, /api/v1/...,
    # esta configuração encaminhará essas chamadas para o backend.
    location /api/ {
        # Se o seu serviço backend se chamar 'api' e rodar na porta 8000 no docker-compose
        proxy_pass http://api:8000; # ATENÇÃO: 'api' aqui é o nome do serviço do backend no docker-compose
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Configurações para servir arquivos estáticos com cache (bom para produção)
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public";
        access_log off; # Desabilita logs para arquivos estáticos para economizar I/O
    }

    # (Opcional) Habilitar gzip para compressão
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
}